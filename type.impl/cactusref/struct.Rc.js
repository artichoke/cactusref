(function() {var type_impls = {
"cactusref":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Adopt-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/adopt.rs.html#80-248\">source</a><a href=\"#impl-Adopt-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cactusref/trait.Adopt.html\" title=\"trait cactusref::Adopt\">Adopt</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Implementation of <a href=\"cactusref/trait.Adopt.html\" title=\"trait cactusref::Adopt\"><code>Adopt</code></a> for <a href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\"><code>Rc</code></a> which enables <code>Rc</code>s to form a cycle\nof strong references that are reaped by <code>Rc</code>’s <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\"><code>Drop</code></a> implementation.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.adopt_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/adopt.rs.html#136-166\">source</a><a href=\"#method.adopt_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"cactusref/trait.Adopt.html#tymethod.adopt_unchecked\" class=\"fn\">adopt_unchecked</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\"><p>Perform bookkeeping to record that <code>this</code> has an owned reference to\n<code>other</code>.</p>\n<p>Adoption is a one-way link, or a directed edge in the object graph which\nmeans “<code>this</code> owns <code>other</code>”.</p>\n<p><code>adopt</code> can be called multiple times for a pair of <code>Rc</code>s. Each call to\n<code>adopt</code> indicates that <code>this</code> owns one distinct clone of <code>other</code>.</p>\n<p>This is an associated function that needs to be used as\n<code>Rc::adopt_unchecked(...)</code>. A method would interfere with methods of the same\nname on the contents of a <code>Rc</code> used through <code>Deref</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers must ensure that <code>this</code> owns a strong reference to <code>other</code>.</p>\n<p>Callers should call <a href=\"cactusref/struct.Rc.html#method.unadopt\" title=\"associated function cactusref::Rc::unadopt\"><code>unadopt</code></a> when <code>this</code> no longer holds a strong\nreference to <code>other</code> to avoid memory leaks, but this is not required for\nsoundness.</p>\n<p>Calling <code>adopt</code> does not increment the strong count of <code>other</code>. Callers\nmust ensure that <code>other</code> has been cloned and stored in the <code>T</code> contained\nby <code>this</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>The following implements a self-referential array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::{Adopt, Rc};\n<span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"attr\">#[derive(Default)]\n</span><span class=\"kw\">struct </span>Array {\n    buffer: Vec&lt;Rc&lt;RefCell&lt;<span class=\"self\">Self</span>&gt;&gt;&gt;,\n}\n\n<span class=\"kw\">let </span>array = Rc::new(RefCell::new(Array::default()));\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>item = Rc::clone(<span class=\"kw-2\">&amp;</span>array);\n    <span class=\"kw\">unsafe </span>{\n        Rc::adopt_unchecked(<span class=\"kw-2\">&amp;</span>array, <span class=\"kw-2\">&amp;</span>item);\n    }\n    array.borrow_mut().buffer.push(item);\n}\n<span class=\"kw\">let </span>weak = Rc::downgrade(<span class=\"kw-2\">&amp;</span>array);\n<span class=\"comment\">// 1 for the array binding, 10 for the `Rc`s in buffer\n</span><span class=\"macro\">assert_eq!</span>(Rc::strong_count(<span class=\"kw-2\">&amp;</span>array), <span class=\"number\">11</span>);\ndrop(array);\n<span class=\"macro\">assert!</span>(weak.upgrade().is_none());\n<span class=\"macro\">assert_eq!</span>(weak.weak_count(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unadopt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/adopt.rs.html#217-247\">source</a><a href=\"#method.unadopt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cactusref/trait.Adopt.html#tymethod.unadopt\" class=\"fn\">unadopt</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\"><p>Perform bookkeeping to record that <code>this</code> has removed an owned reference\nto <code>other</code>.</p>\n<p>Adoption is a one-way link, or a directed edge in the object graph which\nmeans “<code>this</code> owns <code>other</code>”.</p>\n<p>This is an associated function that needs to be used as\n<code>Adopt::unadopt(...)</code>. A method would interfere with methods of the same\nname on the contents of a <code>Rc</code> used through <code>Deref</code>.</p>\n<h5 id=\"memory-leaks\"><a class=\"doc-anchor\" href=\"#memory-leaks\">§</a>Memory Leaks</h5>\n<p>Failure to call this function when removing an owned <code>Rc</code> from <code>this</code>\nis safe, but may result in a memory leak.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>The following implements a self-referential array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::{Adopt, Rc};\n<span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"attr\">#[derive(Default)]\n</span><span class=\"kw\">struct </span>Array {\n    buffer: Vec&lt;Rc&lt;RefCell&lt;<span class=\"self\">Self</span>&gt;&gt;&gt;,\n}\n\n<span class=\"kw\">let </span>array = Rc::new(RefCell::new(Array::default()));\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>item = Rc::clone(<span class=\"kw-2\">&amp;</span>array);\n    <span class=\"kw\">unsafe </span>{\n        Rc::adopt_unchecked(<span class=\"kw-2\">&amp;</span>array, <span class=\"kw-2\">&amp;</span>item);\n    }\n    array.borrow_mut().buffer.push(item);\n}\n<span class=\"kw\">let </span>weak = Rc::downgrade(<span class=\"kw-2\">&amp;</span>array);\n<span class=\"comment\">// 1 for the array binding, 10 for the `Rc`s in buffer\n</span><span class=\"macro\">assert_eq!</span>(Rc::strong_count(<span class=\"kw-2\">&amp;</span>array), <span class=\"number\">11</span>);\n\n<span class=\"kw\">let </span>head = array.borrow_mut().buffer.pop().unwrap();\nRc::unadopt(<span class=\"kw-2\">&amp;</span>array, <span class=\"kw-2\">&amp;</span>head);\n\ndrop(head);\n<span class=\"macro\">assert_eq!</span>(Rc::strong_count(<span class=\"kw-2\">&amp;</span>array), <span class=\"number\">10</span>);\ndrop(array);\n<span class=\"macro\">assert!</span>(weak.upgrade().is_none());\n<span class=\"macro\">assert_eq!</span>(weak.weak_count(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>","Adopt","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CT%3E-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1876-1880\">source</a><a href=\"#impl-AsRef%3CT%3E-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1877-1879\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<T>","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CT%3E-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1870-1874\">source</a><a href=\"#impl-Borrow%3CT%3E-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;T&gt; for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1871-1873\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<T>","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1037-1057\">source</a><a href=\"#impl-Clone-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1053-1056\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of the <code>Rc</code> pointer.</p>\n<p>This creates another pointer to the same allocation, increasing the\nstrong reference count.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let _ </span>= Rc::clone(<span class=\"kw-2\">&amp;</span>five);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1252-1256\">source</a><a href=\"#impl-Debug-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1253-1255\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1059-1074\">source</a><a href=\"#impl-Default-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1071-1073\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>x: Rc&lt;i32&gt; = Default::default();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>","Default","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1021-1035\">source</a><a href=\"#impl-Deref-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1025-1034\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1246-1250\">source</a><a href=\"#impl-Display-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1247-1249\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/drop.rs.html#13-158\">source</a><a href=\"#impl-Drop-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/drop.rs.html#116-157\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Drops the <a href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\"><code>Rc</code></a>.</p>\n<p>This will decrement the strong reference count. If the strong reference\ncount reaches zero then the only other references (if any) are <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a>,\nso we <code>drop</code> the inner value.</p>\n<p>If this <code>Rc</code> has adopted any other <code>Rc</code>s, drop will trace the reachable\nobject graph and detect if this <code>Rc</code> is part of an orphaned cycle. An\norphaned cycle is a cycle in which all members have no owned references\nheld by <code>Rc</code>s outside of the cycle.</p>\n<p><code>Rc</code>s do not pay the cost of the reachability check unless they use\n<a href=\"cactusref/trait.Adopt.html#tymethod.adopt_unchecked\" title=\"associated function cactusref::Adopt::adopt_unchecked\"><code>Adopt::adopt_unchecked</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped!\"</span>);\n    }\n}\n\n<span class=\"kw\">let </span>foo  = Rc::new(Foo);\n<span class=\"kw\">let </span>foo2 = Rc::clone(<span class=\"kw-2\">&amp;</span>foo);\n\ndrop(foo);    <span class=\"comment\">// Doesn't print anything\n</span>drop(foo2);   <span class=\"comment\">// Prints \"dropped!\"</span></code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::{Adopt, Rc};\n\n<span class=\"kw\">struct </span>Foo(u8);\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped {}!\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>);\n    }\n}\n\n<span class=\"kw\">let </span>foo  = Rc::new(Foo(<span class=\"number\">10</span>));\n<span class=\"kw\">let </span>foo2 = Rc::new(Foo(<span class=\"number\">20</span>));\n\n<span class=\"kw\">unsafe </span>{\n    Rc::adopt_unchecked(<span class=\"kw-2\">&amp;</span>foo, <span class=\"kw-2\">&amp;</span>foo2);\n    Rc::adopt_unchecked(<span class=\"kw-2\">&amp;</span>foo2, <span class=\"kw-2\">&amp;</span>foo);\n}\n\ndrop(foo);    <span class=\"comment\">// Doesn't print anything\n</span>drop(foo2);   <span class=\"comment\">// Prints \"dropped 10!\" and \"dropped 20!\"</span></code></pre></div>\n<h5 id=\"cycle-detection-and-deallocation-algorithm\"><a class=\"doc-anchor\" href=\"#cycle-detection-and-deallocation-algorithm\">§</a>Cycle Detection and Deallocation Algorithm</h5>\n<p><a href=\"cactusref/struct.Rc.html#method.adopt_unchecked\" title=\"associated function cactusref::Rc::adopt_unchecked\"><code>Rc::adopt_unchecked</code></a> does explicit bookkeeping to store links to\nadoptee <code>Rc</code>s.  These links form a graph of reachable objects which are\nused to detect cycles.</p>\n<p>On drop, if an <code>Rc</code> has no links, it is dropped like a normal <code>Rc</code>. If\nthe <code>Rc</code> has links, <code>Drop</code> performs a breadth first search by traversing\nthe forward and backward links stored in each <code>Rc</code>. Deallocating cycles\nrequires correct use of <a href=\"cactusref/trait.Adopt.html#tymethod.adopt_unchecked\" title=\"associated function cactusref::Adopt::adopt_unchecked\"><code>Adopt::adopt_unchecked</code></a> and <a href=\"cactusref/trait.Adopt.html#tymethod.unadopt\" title=\"associated function cactusref::Adopt::unadopt\"><code>Adopt::unadopt</code></a>\nto perform the reachability bookkeeping.</p>\n<p>After determining all reachable objects, <code>Rc</code> reduces the graph to\nobjects that form a cycle by performing pairwise reachability checks.\nDuring this step, for each object in the cycle, <code>Rc</code> counts the number\nof refs held by other objects in the cycle.</p>\n<p>Using the cycle-held references, <code>Rc</code> computes whether the object graph\nis reachable by any non-cycle nodes by comparing strong counts.</p>\n<p>If the cycle is orphaned, <code>Rc</code> busts all the link structures and\ndeallocates each object.</p>\n<h6 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">§</a>Performance</h6>\n<p>Cycle detection uses breadth first search to trace the object graph.\nThe runtime complexity of detecting a cycle is <code>O(links + nodes)</code> where\nlinks is the number of adoptions that are alive and nodes is the number\nof objects in the cycle.</p>\n<p>Determining whether the cycle is orphaned builds on cycle detection and\niterates over all nodes in the graph to see if their strong count is\ngreater than the number of references in the cycle. The runtime\ncomplexity of finding an orphaned cycle is <code>O(links + nodes)</code> where\nlinks is the number of adoptions that are alive and nodes is the number\nobjects in the cycle.</p>\n</div></details></div></details>","Drop","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3CT%3E%3E-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1283-1298\">source</a><a href=\"#impl-From%3CBox%3CT%3E%3E-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1295-1297\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Move a boxed object to a new, reference counted, allocation.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>original: Box&lt;i32&gt; = Box::new(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>shared: Rc&lt;i32&gt; = Rc::from(original);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, <span class=\"kw-2\">*</span>shared);</code></pre></div>\n</div></details></div></details>","From<Box<T>>","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1264-1281\">source</a><a href=\"#impl-From%3CT%3E-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1278-1280\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a generic type <code>T</code> into a <code>Rc&lt;T&gt;</code></p>\n<p>The conversion allocates on the heap and moves <code>t</code>\nfrom the stack into it.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>rc = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Rc::from(x), rc);</code></pre></div>\n</div></details></div></details>","From<T>","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1240-1244\">source</a><a href=\"#impl-Hash-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1241-1243\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1219-1238\">source</a><a href=\"#impl-Ord-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1235-1237\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>cmp()</code> on their inner values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n<span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Ordering::Less, five.cmp(<span class=\"kw-2\">&amp;</span>Rc::new(<span class=\"number\">6</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#851-853\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#871-873\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#896-899\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1076-1122\">source</a><a href=\"#impl-PartialEq-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1096-1098\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Equality for two <code>Rc</code>s.</p>\n<p>Two <code>Rc</code>s are equal if their inner values are equal, even if they are\nstored in different allocation.</p>\n<p>If <code>T</code> also implements <code>Eq</code> (implying reflexivity of equality),\ntwo <code>Rc</code>s that point to the same allocation are\nalways equal.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five == Rc::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1119-1121\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Inequality for two <code>Rc</code>s.</p>\n<p>Two <code>Rc</code>s are unequal if their inner values are unequal.</p>\n<p>If <code>T</code> also implements <code>Eq</code> (implying reflexivity of equality),\ntwo <code>Rc</code>s that point to the same allocation are\nnever unequal.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five != Rc::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details></div></details>","PartialEq","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1126-1217\">source</a><a href=\"#impl-PartialOrd-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1142-1144\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Partial comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>partial_cmp()</code> on their inner values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n<span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Ordering::Less), five.partial_cmp(<span class=\"kw-2\">&amp;</span>Rc::new(<span class=\"number\">6</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1160-1162\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Less-than comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>&lt;</code> on their inner values.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five &lt; Rc::new(<span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1178-1180\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>‘Less than or equal to’ comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>&lt;=</code> on their inner values.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five &lt;= Rc::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1196-1198\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Greater-than comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>&gt;</code> on their inner values.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five &gt; Rc::new(<span class=\"number\">4</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1214-1216\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>‘Greater than or equal to’ comparison for two <code>Rc</code>s.</p>\n<p>The two are compared by calling <code>&gt;=</code> on their inner values.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(five &gt;= Rc::new(<span class=\"number\">5</span>));</code></pre></div>\n</div></details></div></details>","PartialOrd","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1258-1262\">source</a><a href=\"#impl-Pointer-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1259-1261\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rc%3CMaybeUninit%3CT%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#455-489\">source</a><a href=\"#impl-Rc%3CMaybeUninit%3CT%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.assume_init\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#486-488\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"cactusref/struct.Rc.html#tymethod.assume_init\" class=\"fn\">assume_init</a>(self) -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts to <code>Rc&lt;T&gt;</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>As with <a href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html#method.assume_init\" title=\"method core::mem::maybe_uninit::MaybeUninit::assume_init\"><code>MaybeUninit::assume_init</code></a>,\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Rc::&lt;u32&gt;::new_uninit();\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>Rc::get_mut_unchecked(<span class=\"kw-2\">&amp;mut </span>five).as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details></div></details>",0,"cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#346-453\">source</a><a href=\"#impl-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#356-370\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Rc&lt;T&gt;</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#391-399\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.new_uninit\" class=\"fn\">new_uninit</a>() -&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Rc</code> with uninitialized contents.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Rc::&lt;u32&gt;::new_uninit();\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>Rc::get_mut_unchecked(<span class=\"kw-2\">&amp;mut </span>five).as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#403-405\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.pin\" class=\"fn\">pin</a>(value: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>, then\n<code>value</code> will be pinned in memory and unable to be moved.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unwrap\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#432-452\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.try_unwrap\" class=\"fn\">try_unwrap</a>(this: Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the inner value, if the <code>Rc</code> has exactly one strong reference.</p>\n<p>Otherwise, an <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a> is returned with the same <code>Rc</code> that was\npassed in.</p>\n<p>This will succeed even if there are outstanding weak references.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>x = Rc::new(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(Rc::try_unwrap(x), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">3</span>));\n\n<span class=\"kw\">let </span>x = Rc::new(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>_y = Rc::clone(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>Rc::try_unwrap(x).unwrap_err(), <span class=\"number\">4</span>);</code></pre></div>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the given <code>Rc</code> does not have exactly one strong reference, it is\nreturned in the <code>Err</code> variant of the returned <code>Result</code>.</p>\n</div></details></div></details>",0,"cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#491-830\">source</a><a href=\"#impl-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#511-515\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.into_raw\" class=\"fn\">into_raw</a>(this: Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Rc</code>, returning the wrapped pointer.</p>\n<p>To avoid a memory leak the pointer must be converted back to an <code>Rc</code> using\n<a href=\"cactusref/struct.Rc.html#method.from_raw\" title=\"associated function cactusref::Rc::from_raw\"><code>Rc::from_raw</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>x = Rc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>x_ptr = Rc::into_raw(x);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>x_ptr }, <span class=\"string\">\"hello\"</span>);\n<span class=\"comment\">// Reconstruct the `Rc` to avoid a leak.\n</span><span class=\"kw\">let _ </span>= <span class=\"kw\">unsafe </span>{ Rc::from_raw(x_ptr) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#534-546\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Provides a raw pointer to the data.</p>\n<p>The counts are not affected in any way and the <code>Rc</code> is not consumed. The pointer is valid\nfor as long there are strong counts in the <code>Rc</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>x = Rc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>y = Rc::clone(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"kw\">let </span>x_ptr = Rc::as_ptr(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert_eq!</span>(x_ptr, Rc::as_ptr(<span class=\"kw-2\">&amp;</span>y));\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>x_ptr }, <span class=\"string\">\"hello\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#590-599\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"cactusref/struct.Rc.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs an <code>Rc&lt;T&gt;</code> from a raw pointer.</p>\n<p>The raw pointer must have been previously returned by a call to\n<a href=\"cactusref/struct.Rc.html#method.into_raw\" title=\"associated function cactusref::Rc::into_raw\"><code>Rc&lt;U&gt;::into_raw</code></a> where <code>U</code> must have the same size\nand alignment as <code>T</code>. This is trivially true if <code>U</code> is <code>T</code>.\nNote that if <code>U</code> is not <code>T</code> but has the same size and alignment, this is\nbasically like transmuting references of different types. See\n<a href=\"https://doc.rust-lang.org/nightly/core/intrinsics/fn.transmute.html\" title=\"fn core::intrinsics::transmute\"><code>mem::transmute</code></a> for more information on what\nrestrictions apply in this case.</p>\n<p>The user of <code>from_raw</code> has to make sure a specific value of <code>T</code> is only\ndropped once.</p>\n<p>This function is unsafe because improper use may lead to memory unsafety,\neven if the returned <code>Rc&lt;T&gt;</code> is never accessed.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>x = Rc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>x_ptr = Rc::into_raw(x);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Convert back to an `Rc` to prevent leak.\n    </span><span class=\"kw\">let </span>x = Rc::from_raw(x_ptr);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"string\">\"hello\"</span>);\n\n    <span class=\"comment\">// Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.\n</span>}\n\n<span class=\"comment\">// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!</span></code></pre></div>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Callers must ensure that <code>ptr</code> points to a live <code>Rc</code> and was created\nwith a call to <a href=\"cactusref/struct.Rc.html#method.into_raw\" title=\"associated function cactusref::Rc::into_raw\"><code>Rc::into_raw</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#613-621\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.downgrade\" class=\"fn\">downgrade</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"struct\" href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a> pointer to this allocation.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>weak_five = Rc::downgrade(<span class=\"kw-2\">&amp;</span>five);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weak_count\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#637-639\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.weak_count\" class=\"fn\">weak_count</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the number of <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a> pointers to this allocation.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>_weak_five = Rc::downgrade(<span class=\"kw-2\">&amp;</span>five);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Rc::weak_count(<span class=\"kw-2\">&amp;</span>five));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strong_count\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#655-657\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.strong_count\" class=\"fn\">strong_count</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the number of strong (<code>Rc</code>) pointers to this allocation.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>_also_five = Rc::clone(<span class=\"kw-2\">&amp;</span>five);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Rc::strong_count(<span class=\"kw-2\">&amp;</span>five));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.increment_strong_count\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#687-692\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"cactusref/struct.Rc.html#tymethod.increment_strong_count\" class=\"fn\">increment_strong_count</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a>)</h4></section></summary><div class=\"docblock\"><p>Increments the strong reference count on the <code>Rc&lt;T&gt;</code> associated with the\nprovided pointer by one.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The pointer must have been obtained through <code>Rc::into_raw</code>, and the\nassociated <code>Rc</code> instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    <span class=\"kw\">let </span>five = Rc::from_raw(ptr);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Rc::strong_count(<span class=\"kw-2\">&amp;</span>five));\n\n    <span class=\"comment\">// Decrement the strong count to avoid a leak.\n    </span>Rc::decrement_strong_count(ptr);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decrement_strong_count\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#723-725\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"cactusref/struct.Rc.html#tymethod.decrement_strong_count\" class=\"fn\">decrement_strong_count</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a>)</h4></section></summary><div class=\"docblock\"><p>Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> associated with the\nprovided pointer by one.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The pointer must have been obtained through <code>Rc::into_raw</code>, and the\nassociated <code>Rc</code> instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method. This method can be used to release\nthe final <code>Rc</code> and backing storage, but <strong>should not</strong> be called after\nthe final <code>Rc</code> has been released.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    <span class=\"kw\">let </span>five = Rc::from_raw(ptr);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Rc::strong_count(<span class=\"kw-2\">&amp;</span>five));\n    Rc::decrement_strong_count(ptr);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Rc::strong_count(<span class=\"kw-2\">&amp;</span>five));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#759-765\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Self</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference into the given <code>Rc</code>, if there are\nno other <code>Rc</code> or <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a> pointers to the same allocation.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> otherwise, because it is not safe to\nmutate a shared value.</p>\n<p>See also <a href=\"cactusref/struct.Rc.html#method.make_mut\" title=\"associated function cactusref::Rc::make_mut\"><code>make_mut</code></a>, which will <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" title=\"method core::clone::Clone::clone\"><code>clone</code></a>\nthe inner value when there are other pointers.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = Rc::new(<span class=\"number\">3</span>);\n<span class=\"kw-2\">*</span>Rc::get_mut(<span class=\"kw-2\">&amp;mut </span>x).unwrap() = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"number\">4</span>);\n\n<span class=\"kw\">let </span>_y = Rc::clone(<span class=\"kw-2\">&amp;</span>x);\n<span class=\"macro\">assert!</span>(Rc::get_mut(<span class=\"kw-2\">&amp;mut </span>x).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#793-806\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"cactusref/struct.Rc.html#tymethod.get_mut_unchecked\" class=\"fn\">get_mut_unchecked</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference into the given <code>Rc</code>,\nwithout any check.</p>\n<p>See also <a href=\"cactusref/struct.Rc.html#method.get_mut\" title=\"associated function cactusref::Rc::get_mut\"><code>get_mut</code></a>, which is safe and does appropriate checks.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Any other <code>Rc</code> or <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a> pointers to the same allocation must not be dereferenced\nfor the duration of the returned borrow.\nThis is trivially the case if no such pointers exist,\nfor example immediately after <code>Rc::new</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = Rc::new(String::new());\n<span class=\"kw\">unsafe </span>{\n    Rc::get_mut_unchecked(<span class=\"kw-2\">&amp;mut </span>x).push_str(<span class=\"string\">\"foo\"</span>)\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, <span class=\"string\">\"foo\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ptr_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#827-829\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.ptr_eq\" class=\"fn\">ptr_eq</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation\n(in a vein similar to <a href=\"https://doc.rust-lang.org/nightly/core/ptr/fn.eq.html\" title=\"fn core::ptr::eq\"><code>ptr::eq</code></a>).</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span>five = Rc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>same_five = Rc::clone(<span class=\"kw-2\">&amp;</span>five);\n<span class=\"kw\">let </span>other_five = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert!</span>(Rc::ptr_eq(<span class=\"kw-2\">&amp;</span>five, <span class=\"kw-2\">&amp;</span>same_five));\n<span class=\"macro\">assert!</span>(!Rc::ptr_eq(<span class=\"kw-2\">&amp;</span>five, <span class=\"kw-2\">&amp;</span>other_five));</code></pre></div>\n</div></details></div></details>",0,"cactusref::CactusRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#832-920\">source</a><a href=\"#impl-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#882-919\">source</a><h4 class=\"code-header\">pub fn <a href=\"cactusref/struct.Rc.html#tymethod.make_mut\" class=\"fn\">make_mut</a>(this: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Makes a mutable reference into the given <code>Rc</code>.</p>\n<p>If there are other <code>Rc</code> pointers to the same allocation, then <code>make_mut</code> will\n<a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" title=\"method core::clone::Clone::clone\"><code>clone</code></a> the inner value to a new allocation to ensure unique ownership.  This is also\nreferred to as clone-on-write.</p>\n<p>If there are no other <code>Rc</code> pointers to this allocation, then <a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a>\npointers to this allocation will be disassociated.</p>\n<p>See also <a href=\"cactusref/struct.Rc.html#method.get_mut\" title=\"associated function cactusref::Rc::get_mut\"><code>get_mut</code></a>, which will fail rather than cloning.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = Rc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw-2\">*</span>Rc::make_mut(<span class=\"kw-2\">&amp;mut </span>data) += <span class=\"number\">1</span>;        <span class=\"comment\">// Won't clone anything\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other_data = Rc::clone(<span class=\"kw-2\">&amp;</span>data);    <span class=\"comment\">// Won't clone inner data\n</span><span class=\"kw-2\">*</span>Rc::make_mut(<span class=\"kw-2\">&amp;mut </span>data) += <span class=\"number\">1</span>;        <span class=\"comment\">// Clones inner data\n</span><span class=\"kw-2\">*</span>Rc::make_mut(<span class=\"kw-2\">&amp;mut </span>data) += <span class=\"number\">1</span>;        <span class=\"comment\">// Won't clone anything\n</span><span class=\"kw-2\">*</span>Rc::make_mut(<span class=\"kw-2\">&amp;mut </span>other_data) <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;  <span class=\"comment\">// Won't clone anything\n\n// Now `data` and `other_data` point to different allocations.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>data, <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>other_data, <span class=\"number\">12</span>);</code></pre></div>\n<p><a href=\"cactusref/struct.Weak.html\" title=\"struct cactusref::Weak\"><code>Weak</code></a> pointers will be disassociated:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cactusref::Rc;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = Rc::new(<span class=\"number\">75</span>);\n<span class=\"kw\">let </span>weak = Rc::downgrade(<span class=\"kw-2\">&amp;</span>data);\n\n<span class=\"macro\">assert!</span>(<span class=\"number\">75 </span>== <span class=\"kw-2\">*</span>data);\n<span class=\"macro\">assert!</span>(<span class=\"number\">75 </span>== <span class=\"kw-2\">*</span>weak.upgrade().unwrap());\n\n<span class=\"kw-2\">*</span>Rc::make_mut(<span class=\"kw-2\">&amp;mut </span>data) += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert!</span>(<span class=\"number\">76 </span>== <span class=\"kw-2\">*</span>data);\n<span class=\"macro\">assert!</span>(weak.upgrade().is_none());</code></pre></div>\n</div></details></div></details>",0,"cactusref::CactusRef"],["<section id=\"impl-Eq-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1124\">source</a><a href=\"#impl-Eq-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section>","Eq","cactusref::CactusRef"],["<section id=\"impl-Unpin-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cactusref/rc.rs.html#1882\">source</a><a href=\"#impl-Unpin-for-Rc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"cactusref/struct.Rc.html\" title=\"struct cactusref::Rc\">Rc</a>&lt;T&gt;</h3></section>","Unpin","cactusref::CactusRef"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()